using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Threading;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Windows.Input;

namespace CS_Raycaster
{
    public partial class MainWindow : Form
    {
        // These control the size of window and frame.
        private const int W_WIDTH = 1200;
        private const int W_HEIGHT = 800;

        private Thread logicThread;

        // Stopwatch is used to keep track of frame time for consistent movement.
        private Stopwatch frameTime = new Stopwatch();

        Raycaster RC = new Raycaster();

        private bool forward = false;
        private bool back = false;
        private bool left = false;
        private bool right = false;

        public MainWindow()
        {
            // Creating the window and setting component sizes.
            InitializeComponent();
            this.pictureBoxMain.Size = new Size(W_WIDTH, W_HEIGHT);
            this.ClientSize = new Size(W_WIDTH, W_HEIGHT);

            // The logic thread will handle raycasting and movement.
            logicThread = new Thread(RunLoop);
            logicThread.Start();
        }

        public void RunLoop()
        {
            // FrameTimeDouble is the length of time between frames.
            double frameTimeDouble = 0;
            while (true)
            {
                // Start the stopwatch so we can time this frame.
                this.frameTime.Restart();
                // Move the player if a movement key is being pressed.
                this.MovePlayer();
                // Update the player move speeds based on the last frame length.
                RC.UpdateFramerate(frameTimeDouble);
                // Set the image in the picture box to be a frame generated by the raycaster.
                SetImage(RC.NewFrame(W_WIDTH, W_HEIGHT));
                // Stop the stopwatch so we can get the time the frame took.
                this.frameTime.Stop();
                frameTimeDouble = this.frameTime.ElapsedMilliseconds;
            }

        }

        private void SetImage(Image img)
        {
            // Set the picturebox img to be whatever is given to us.
            pictureBoxMain.Image = img;
        }

        private void MainWindow_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Close the logic thread when the form thread is closing.
            this.logicThread.Abort();
        }

        private void MainWindow_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            // This function gets when a key is pressed and changes that key's bool so that
            // we know it's down and can be used when we move the player.
            if (Keyboard.IsKeyDown(Key.W))
            {
                this.forward = true;
            }

            if (Keyboard.IsKeyDown(Key.S))
            {
                this.back = true;
            }
            if (Keyboard.IsKeyDown(Key.A))
            {
                this.left = true;
            }
            if (Keyboard.IsKeyDown(Key.D))
            {
                this.right = true;
            }
        }

        private void MainWindow_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            // This function gets when a key is released and changes that key's bool so that
            // we know it's up again and can stop moving the player.
            if (!Keyboard.IsKeyDown(Key.W))
            {
                this.forward = false;
            }

            if (!Keyboard.IsKeyDown(Key.S))
            {
                this.back = false;
            }
            if (!Keyboard.IsKeyDown(Key.A))
            {
                this.left = false;
            }
            if (!Keyboard.IsKeyDown(Key.D))
            {
                this.right = false;
            }
        }

        private void MovePlayer()
        {
            // Checks if any key bools are down, and performs the appropriate player move(s).
            if (this.forward)
            {
                RC.Move(true);
            }

            if (this.back)
            {
                RC.Move(false);
            }

            if (this.left)
            {
                RC.Turn(false);
            }

            if (this.right)
            {
                RC.Turn(true);
            }
        }
    }
}
